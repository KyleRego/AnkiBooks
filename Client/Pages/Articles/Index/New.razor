@using AnkiBooks.Models;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<New> Logger

<Button Color="ButtonColor.Primary"
        @onclick="OnShowModalClick">
    New article
</Button>

<Modal @ref="modal" Title="New article" IsVerticallyCentered="true">
    <BodyTemplate>
        <EditForm Model="Article"
                OnValidSubmit="SubmitForm"
                OnInvalidSubmit="LogInvalidSubmit"
                FormName="NewArticle"
        >
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label" for="article-title">Title:</label>
                <InputText @bind-Value="Article!.Title" id="article-title" class="form-control" />
            </div>

            <Button Color="ButtonColor.Primary" Type="ButtonType.Submit">Create</Button>

        </EditForm>
    </BodyTemplate>
</Modal>

@code {
    private Modal modal = new();
    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    [SupplyParameterFromForm]
    private Article? Article { get; set; }

    protected override void OnInitialized()
    {
        Article ??= new("");
    }

    private const string endpoint = "http://localhost:5229/api/Articles";
    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(Article);
        ArgumentNullException.ThrowIfNull(Article.Title);

        Logger.LogDebug("hello world");

        HttpResponseMessage response = await Http.PostAsJsonAsync(endpoint, Article);
        response.EnsureSuccessStatusCode();

        Navigation.NavigateTo("counter");
    }

    private void LogInvalidSubmit()
    {
        Logger.LogInformation("it was invalid");
    }
}