@page "/study"

@implements IDisposable

@layout MainLayout

@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Services

@inject ICardService CardService
@inject ILogger<Study> logger
@inject PersistentComponentState ApplicationState

@if (dueCards == null)
{
    <p>Requesting due cards...</p>
}
else
{
    <div class="d-flex justify-content-center align-items-center h-screen-minus-header">
        <Reviewer Cards="@dueCards" />
    </div>
}

@code {
    private List<Card>? dueCards;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnParametersSetAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<List<Card>>(nameof(dueCards), out var restored))
        {
            dueCards = await CardService.GetDueCards();
        }
        else
        {
            dueCards = restored;
        }

        ArgumentNullException.ThrowIfNull(dueCards);
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(dueCards), dueCards);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}