@page "/"
@layout MainLayout

@implements IDisposable

@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces.Services
@using AnkiBooks.WebApp.Client.Layout
@using AnkiBooks.WebApp.Client.Shared.Heroicons
@using AnkiBooks.WebApp.Client.Services

@inject IBookService BookService
@inject PersistentComponentState ApplicationState

<PageTitle>Anki Books</PageTitle>

<div class="d-flex">
    <div class="d-flex flex-column p-16">
        <h1 class="font-size-48-px">
            Hello and welcome to Anki Books
        </h1>

        <ul class="mt-4">
            <h2>Free published books:</h2>

            @if (publicBooks != null)
            {
                <li>Pretend book name (need to be able to create public books)</li>
                @foreach (Book book in publicBooks)
                {
                    <li>@book.Title</li>
                }
            }
        </ul>
    </div>

    <div class="d-flex justify-content-center align-items-center">
        <img src="images/the_girl-02.png" style="transform: scale(0.5);"  />
    </div>
</div>

@code {
    private List<Book>? publicBooks;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnParametersSetAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<List<Book>>(nameof(publicBooks), out var restored))
        {
            publicBooks = await BookService.GetPublicBooks();
        }
        else
        {
            publicBooks = restored;
        }

        ArgumentNullException.ThrowIfNull(publicBooks);
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(publicBooks), publicBooks);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}
