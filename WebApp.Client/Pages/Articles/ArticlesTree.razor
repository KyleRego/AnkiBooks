@using System.Text.Json
@using System.Text.Json.Serialization
@using AnkiBooks.ApplicationCore.Entities
@inject IConfiguration Config
@inject IAnkiBooksApiService ApiService
@inject ILogger<ArticlesTree> Logger
@implements IDisposable
@inject PersistentComponentState ApplicationState

<div>
    @if (articles == null)
    {
        <p>Loading articles</p>
    }
    else
    {
        <input type="search" class="w-100 p-1 mb-2" placeholder="Filter articles:" />
        <ul>
        @for(int i = 0; i < articles.Count; i++)
        {
            Article article = articles[i];

            <ArticlesTreeNode @bind-Articles="@articles" Article="@article" />
        }
            <li>
                <NewArticle @bind-Articles="@articles" ParentArticle="@(null)" />
            </li>
        </ul>
    }
</div>

@code {
    private List<Article>? articles;
    private PersistingComponentStateSubscription persistingSubscription;
    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<List<Article>>(nameof(articles), out var restored))
        {
            articles = await ApiService.GetArticles();
        }
        else
        {
            articles = restored;
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(articles), articles);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}