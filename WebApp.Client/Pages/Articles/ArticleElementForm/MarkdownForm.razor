@using AnkiBooks.ApplicationCore.Entities
@inject IJSRuntime JS

<EditForm Model="MarkdownContent" OnValidSubmit="SubmitForm">
<DataAnnotationsValidator />
<ValidationSummary />

<div id="@ContainerDomId">
    <div class="d-flex flex-column">

        <InputTextArea class="border-secondary mb-2"
                        @bind-Value="MarkdownContent.Text" rows="5" />

        <div class="d-flex justify-content-center">
            <button class="btn btn-primary" type="submit">
                @SubmitButtonText()
            </button>
        </div>
    </div>
</div>

</EditForm>

@code {
    [Parameter]
    public MarkdownContent StartingMarkdown { get; set; } = null!;

    protected override void OnInitialized()
    {
        MarkdownContent = StartingMarkdown;
    }

    [Parameter]
    public bool EditingExisting { get; set; }

    private string SubmitButtonText()
    {
        return EditingExisting ? "Update" : "Create";
    }

    [Parameter]
    public Func<MarkdownContent, Task> ParentSubmitMethod { get; set; } = null!;

    public async Task SubmitForm()
    {
        await ParentSubmitMethod.Invoke(MarkdownContent);
    }

    [SupplyParameterFromForm]
    public MarkdownContent MarkdownContent { get; set; } = null!;

    private IJSObjectReference? module;

    private string ContainerDomId = Guid.NewGuid().ToString();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Pages/Articles/ArticleElementForm/MarkdownForm.razor.js");
            await module.InvokeVoidAsync("setupEventHandlers", ContainerDomId);
        }
    }
}