@using AnkiBooks.ApplicationCore.Entities

@using AnkiBooks.WebApp.Client.Pages.Articles.EditArticleElement
@using AnkiBooks.WebApp.Client.Pages.Articles.ArticleDeck.DeckCard

<div class="pl-7 d-flex flex-row justify-content-center">
    <div class="w-72">
        @if (Editing == true)
        {
            <EditDeck StartingDeck="@Deck" @bind-Editing="@Editing" />
        }
        else
        {
            <div>
                <div class="d-flex flex-row justify-content-end mb-2">
                    <div class="btn btn-primary d-flex justify-content-start align-items-center"
                            role="button" @onclick="BeginEditing">
                        <div class="mr-2">
                            Edit
                        </div>
                        <div class="w-5 h-5" >
                            <Edit />
                        </div>
                    </div>
                </div>

                <div class="d-flex flex-row justify-content-center mb-2">
                    <div class="border-primary p-4">
                        <div class="d-flex flex-row justify-content-center align-items-center mb-4">
                            <div class="mr-4">
                                @Deck.Name
                            </div>

                            <div>
                                @(Cards.Count) cards
                            </div>
                        </div>

                        <div class="d-flex justify-content-center">
                            <p class="text-center">
                                @Deck.Description    
                            </p>
                        </div>
                    </div>
                </div>

                <div class="d-flex flex-row justify-content-around align-items-center">
                    @if (cardsRevealed == false)
                    {
                        <div class="d-flex justify-content-center">
                            <button class="btn btn-primary" type="button" @onclick="ShowCards">    
                                <div class="d-flex flex-row justify-content-start align-items-center">
                                    <div class="mr-2">
                                        Show cards
                                    </div>
                                    <div class="w-5 h-5">
                                        <ArrowDownSquareStack />
                                    </div>
                                </div>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center">
                            <button class="btn btn-primary" type="button" @onclick="HideCards">    
                                <div class="d-flex flex-row justify-content-start align-items-center">
                                    <div class="mr-2">
                                        Hide cards
                                    </div>
                                    <div class="w-5 h-5">
                                        <ArrowUpSquareStack />
                                    </div>
                                </div>
                            </button>
                        </div>
                    }

                    <NewCard DeckId="@Deck.Id" @bind-Cards="@Cards" />
                </div>
            </div>
        }
    </div>
</div>

@if (cardsRevealed == true)
{
    <div class="d-flex flex-row justify-content-around align-items-center flex-wrap">
        @foreach (Card card in Cards)
        {
            <div class="m-3">
                <DeckCard Card="@card" />                
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public Deck Deck { get; set; } = null!;

    public List<Card> Cards { get; set; } = [];

    protected override void OnParametersSet()
    {
        Cards = Deck.Cards();
    }

    [Parameter]
    public OrderedElementsContainer<ArticleElement> ElementsContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer<ArticleElement>> ElementsContainerChanged { get; set; }

    public bool Editing { get; set; } = false;

    private void BeginEditing()
    {
        Editing = true;
    }
    
    private bool cardsRevealed = false;

    private void ShowCards()
    {
        cardsRevealed = true;
    }

    private void HideCards()
    {
        cardsRevealed = false;
    }
}