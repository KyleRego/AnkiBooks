@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Enums
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.ApplicationCore.Services

@inject ILogger<NewDeck> Logger
@inject IDeckService DeckService

<DeckForm  StartingDeck="@StartingDeck()"
            EditingExisting="false"
            ParentSubmitMethod="@SubmitForm" />

@code {
    [CascadingParameter(Name="ArticleId")]
    public string ArticleId { get; set; } = null!;

    [Parameter]
    public ArticleElementType? DropDownItemSelected { get; set; }

    [Parameter]
    public EventCallback<ArticleElementType?> DropDownItemSelectedChanged { get; set; }

    [Parameter]
    public int OrdinalPosition { get; set; }

    [Parameter]
    public OrderedElementsContainer<ArticleElement> ElementsContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer<ArticleElement>?> ElementsContainerChanged { get; set; }

    private Deck StartingDeck()
    {
        return new()
        {
            ArticleId = ArticleId
        };
    }

    private async Task SubmitForm(Deck newDeck)
    {
        newDeck.OrdinalPosition = OrdinalPosition;

        Deck? createdDeck = await DeckService.PostDeck(newDeck);
        ArgumentNullException.ThrowIfNull(newDeck);

        ElementsContainer.Add(createdDeck);
        await ElementsContainerChanged.InvokeAsync(ElementsContainer);
        DropDownItemSelected = null;
        await DropDownItemSelectedChanged.InvokeAsync(DropDownItemSelected);
    }
}