@using AnkiBooks.ApplicationCore.Entities

@using AnkiBooks.WebApp.Client.Pages.Articles.Elements.Decks.Cards

@using AnkiBooks.WebApp.Client.Pages.Articles.Elements

@inherits ArticleElementRootBase<Deck>

@if (Editing == true)
{
    <EditDeck InitialArticleElement="@ArticleElement" @bind-Editing="@Editing" />
}
else
{
    <div class="d-flex flex-row justify-content-between align-items-center">
        <h2 class="font-size-2xl">
            @ArticleElement.Name
        </h2>

        @if (showingOptions == false)
        {
            <div class="d-flex flex-row justify-content-start">
                <div class="w-5 h-5 mr-2" role="button" title="Edit markdown" @onclick="StartEditing">
                    <Edit />
                </div>

                <div role="button" class="w-5 h-5" title="Options" @onclick="ShowOptions">
                    <Gear />
                </div>
            </div>
        }
        else
        {
            <div class="position-relative top-4 right-4 px-2 border-primary">
                <ul>
                    <li class="my-2" @onclick="CancelShowingOptions">Cancel</li>
                    <li class="my-2" @onclick="DeleteArticleElement">Delete deck</li>
                </ul>
            </div>
        }
    </div>

    @if (!String.IsNullOrWhiteSpace(@ArticleElement.Description))
    {
        <p class="my-4">
            @ArticleElement.Description    
        </p>
    }

    <div class="my-4">
        @(Cards.Count) cards
    </div>

    <div class="my-4 d-flex flex-row justify-content-center">
        <NewCardSelect DeckId="@ArticleElement.Id" @bind-Cards="@Cards" />
    </div>
}

@if (currentCard == null)
{
    <p class="my-4 text-center">Congratulations! You have completed studying this deck (no cards are due right now).</p>
}
else
{
    <div class="my-4">
        <div class="d-flex flex-row justify-content-center">
            <CardRoot Card="@currentCard" @bind-AnswerRevealed="currentCardAnswerRevealed" />
        </div>
        <div class="d-flex flex-row justify-content-center mt-2">
            @if (currentCardAnswerRevealed == false)
            {
                <button tabindex="0" type="button" class="btn btn-primary" @onclick="HandleAnswer" @ref="answerButton">
                    Answer ü´•
                </button>
            }
            else
            {
                <button tabindex="0" type="button" class="btn btn-primary mr-4" @onclick="HandleFeedback">
                    Bad ‚òπÔ∏è
                </button>
                <button tabindex="0" type="button" class="btn btn-primary" @onclick="HandleFeedback" @ref="goodButton">
                    Good üòÄ
                </button>
            }
        </div>
    </div>
}

@code {
    public required List<Card> Cards { get; set; }

    private int currentCardIndex = 0;

    private Card? currentCard;

    private bool currentCardAnswerRevealed = false;

    protected override void OnParametersSet()
    {
        Cards = ArticleElement.Cards();
        currentCardIndex = 0;
        currentCard = GetNextCard();
    }

    private Card? GetNextCard()
    {
        if (currentCardIndex < Cards.Count)
        {
            return Cards[currentCardIndex];
        }
        else
        {
            return null;
        }
    }

    private ElementReference answerButton;
    private ElementReference goodButton;

    private async Task HandleAnswer()
    {
        currentCardAnswerRevealed = true;
        await Task.Delay(100);
        await goodButton.FocusAsync();
    }

    private async Task HandleFeedback()
    {
        currentCardAnswerRevealed = false;
        currentCardIndex += 1;
        currentCard = GetNextCard();
        if (currentCard != null)
        {
            await Task.Delay(100);
            await answerButton.FocusAsync();
        }
    }
}