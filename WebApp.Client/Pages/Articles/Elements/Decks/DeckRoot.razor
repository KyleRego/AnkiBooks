@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Enums

@using AnkiBooks.WebApp.Client.Pages.Articles.Elements
@using AnkiBooks.WebApp.Client.Shared.Cards
@using AnkiBooks.WebApp.Client.Shared.Cards.Basic
@using AnkiBooks.WebApp.Client.Shared.Cards.Cloze

@inherits ArticleElementRootBase<Deck>

@if (Editing == true)
{
    <EditDeck InitialArticleElement="@ArticleElement" @bind-Editing="@Editing" />
}
else
{
    <div class="d-flex flex-row justify-content-between align-items-center">
        <h2 class="font-size-2xl">
            @ArticleElement.Name
        </h2>

        @if (showingOptions == false)
        {
            <div class="d-flex flex-row justify-content-start">
                <div class="w-5 h-5 mr-2" role="button" title="Edit markdown" @onclick="StartEditing">
                    <Edit />
                </div>

                <div role="button" class="w-5 h-5" title="Options" @onclick="ShowOptions">
                    <Gear />
                </div>
            </div>
        }
        else
        {
            <div class="position-relative top-4 right-4 px-2 border-color-primary border-width-thin border-style-solid">
                <ul>
                    <li class="my-2" @onclick="CancelShowingOptions">Cancel</li>
                    <li class="my-2" @onclick="DeleteArticleElement">Delete deck</li>
                </ul>
            </div>
        }
    </div>

    @if (!String.IsNullOrWhiteSpace(@ArticleElement.Description))
    {
        <p class="my-4">
            @ArticleElement.Description    
        </p>
    }

    <div class="my-4 d-flex flex-row justify-content-start align-items-center">
        <div class="mr-4">
            @(Cards.Count) cards
        </div>
        @if (newCardSelection == null)
        {
            <div>
                <InputSelect @bind-Value="newCardSelection" name="new-card">
                    <option value="" selected>New card</option>
                    <option value="@CardType.BasicNote">Basic</option>
                    <option value="@CardType.ClozeNote">Cloze</option>
                </InputSelect>
            </div>
        }
    </div>

    @if (newCardSelection != null)
    {
        @switch (newCardSelection)
        {
            case CardType.BasicNote:
                <NewBasicNote DeckId="@ArticleElement.Id"
                                        @bind-NewCardSelection="newCardSelection"
                                        @bind-Cards="Cards" />
                break;

            case CardType.ClozeNote:
                <NewClozeNote DeckId="@ArticleElement.Id"
                                        @bind-NewCardSelection="newCardSelection"
                                        @bind-Cards="Cards" />
                break;

            default:
                break;
        }
    }

    <div class="my-4 d-flex flex-row flex-no-wrap justify-content-start align-items-end overflow-x-scroll">
        @for (int j = 0; j < Cards.Count; j++)
        {
            Card card = Cards[j];

            <div class="mr-5 mb-4 flex-shrink-0">
                <CardRoot Card="@card" ParentHandleGradeMethod="@HandleGrade" />
            </div>
        }
    </div>
}

@code {
    private CardType? newCardSelection = null;

    public required List<Card> Cards { get; set; }

    protected override void OnParametersSet()
    {
        Cards = ArticleElement.Cards();
    }

    private Task HandleGrade(Card card, Grade grade)
    {
        Cards.Remove(card);
        Cards.Add(card);

        StateHasChanged();
        return Task.CompletedTask;
    }
}