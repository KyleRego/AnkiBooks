@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Services
@using AnkiBooks.ApplicationCore.Enums

@using AnkiBooks.WebApp.Client.Pages.Articles.Elements.Decks.Cards.Basic
@using AnkiBooks.WebApp.Client.Pages.Articles.Elements.Decks.Cards.Cloze

@inject ICardService CardService
@inject IRepetitionService RepetitionService

@if (editingCard == true)
{
    <div class="w-84 min-h-58">
    @switch(Card)
    {
        case BasicNote bn:
            <EditBasicNote InitialCard="@bn" @bind-EditingCard="editingCard" />
            break;

        case ClozeNote cn:
            <EditClozeNote InitialCard="@cn" @bind-EditingCard="editingCard" />
            break;
    }
    </div>
}
else
{
    <div class="d-flex flex-row justify-content-start">
        <div class="w-5">
            @* This adds space to the left of the card to keep it centered *@
        </div>
        <div class="border-color-primary border-width-thin border-style-solid w-84 min-h-48 white-space-pre-wrap">
            @switch(Card)
            {
                case BasicNote bn:
                    <DeckBasicNote BasicNote="@bn" AnswerRevealed="@Card.ShowingAnswer" />
                    break;

                case ClozeNote cn:
                    <DeckClozeNote ClozeNote="@cn" AnswerRevealed="@Card.ShowingAnswer" />
                    break;
            }
        </div>
        <div class="d-flex flex-column justify-content-start">
            <div role="button" title="Edit card" class="w-5 h-5 mb-4" @onclick="StartEditing" >
                <Edit />
            </div>

            <div role="button" title="Delete card" class="w-5 h-5" @onclick="DeleteCard">
                <Delete />
            </div>
        </div>
    </div>
    <div class="d-flex flex-row justify-content-center mt-2">
        @if (Card.ShowingAnswer == false)
        {
            <button tabindex="0" type="button" class="btn btn-primary" @onclick="RevealAnswer">
                Answer ü´•
            </button>
        }
        else
        {
            <button tabindex="0" type="button" class="btn btn-primary mr-4" @onclick="(() => HandleGrade(Grade.Bad))">
                Bad ‚òπÔ∏è
            </button>
            <button tabindex="0" type="button" class="btn btn-primary" @onclick="(() => HandleGrade(Grade.Good))">
                Good üòÄ
            </button>
        }
    </div>
}

@code {
    [Parameter]
    public required Card Card { get; set; }

    private void RevealAnswer()
    {
        Card.ShowingAnswer = true;
    }

    [Parameter]
    public Func<Card, Grade, Task>? ParentHandleGradeMethod { get; set; }

    private async Task HandleGrade(Grade grade)
    {
        Repetition rep = new()
        {
            CardId = Card.Id,
            Grade = grade
        };
        Repetition? createdRep = await RepetitionService.PostRepetition(rep);
        ArgumentNullException.ThrowIfNull(createdRep);

        Card.ShowingAnswer = false;

        if (ParentHandleGradeMethod != null)
        {
            await ParentHandleGradeMethod.Invoke(Card, grade);
        }
    }

    private bool editingCard;

    private void StartEditing() => editingCard = true;

    private async Task DeleteCard()
    {
        await CardService.DeleteCard(Card);
    }
}
