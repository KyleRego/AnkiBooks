@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Services

@inject ILinkService LinkService

<EditForm Model="FormLink" OnValidSubmit="HandleSubmit">
    <div>
        <div class="d-flex justify-content-center">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>

        <div class="d-flex flex-row justify-content-start">
            <div>
                <label>URL:</label>
                <InputText @bind-Value="FormLink.Url" />
            </div>

            <div class="ml-4">
                <label>Name:</label
                <InputText @bind-Value="FormLink.Name" />
            </div>

            <button type="submit" class="ml-4">
                Update link
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Link Link { get; set; }

    [Parameter]
    public EventCallback<Link> LinkChanged { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    [Parameter]
    public EventCallback<bool> EditingChanged { get; set; }

    [SupplyParameterFromForm]
    private Link FormLink { get; set; } = new();

    protected override void OnParametersSet()
    {
        FormLink = Link;
    }

    private async Task HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(FormLink);
        ArgumentNullException.ThrowIfNull(FormLink.Url);

        // Validate URL here
        Link? updatedLink = await LinkService.PutLink(FormLink);
        if (updatedLink != null)
        {
            Link = updatedLink;
            await LinkChanged.InvokeAsync(Link);

            Editing = false;
            await EditingChanged.InvokeAsync(Editing);
        }
    }
}