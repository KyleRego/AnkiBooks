@using System.Text.Json
@using AnkiBooks.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IConfiguration Config
@inject ILogger<New> Logger
@inject DialogService DialogService


<div>
    <EditForm   Model="Article"
                OnValidSubmit="SubmitForm"
                OnInvalidSubmit="LogInvalidSubmit"
                FormName="NewArticle">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <RadzenText for="article-title">Title:</RadzenText>
            <RadzenTextBox @bind-Value="Article!.Title" id="article-title" class="w-100" />
        </div>

        <RadzenButton Text="Create" Type="ButtonType.Submit" />

    </EditForm>
</div>

@code {
    string? serviceEndpoint;

    protected override void OnInitialized()
    {
        Article ??= new("");
        serviceEndpoint = $"{Config.GetValue<string>("Url")}/api/Articles";
    }

    [SupplyParameterFromForm]
    private Article? Article { get; set; }

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(Article);
        ArgumentNullException.ThrowIfNull(Article.Title);

        HttpResponseMessage response = await Http.PostAsJsonAsync(serviceEndpoint, Article);
        response.EnsureSuccessStatusCode();

        string responseBody = await response.Content.ReadAsStringAsync();
        JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true
        };
        Article? article = JsonSerializer.Deserialize<Article>(responseBody, jsonOptions);
        ArgumentNullException.ThrowIfNull(article);

        Navigation.NavigateTo($"articles/{article.Id}");
    }

    private void LogInvalidSubmit()
    {
        Logger.LogInformation("it was invalid");
    }
}