@using System.Text.Json
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.WebApp.Client.Shared.Heroicons
@inject IAnkiBooksApiService ApiService
@inject NavigationManager Navigation
@inject IConfiguration Config
@inject ILogger<NewArticle> Logger
@inject IJSRuntime JS

<div id="@ContainerDomId">

    <button role="button" class="showDialogBtn">
        New article
    </button>

    <dialog class="p-2 border-primary">
        <EditForm   Model="Article"
                    OnValidSubmit="SubmitForm"
                    OnInvalidSubmit="LogInvalidSubmit"
                    FormName="NewArticle">

            <DataAnnotationsValidator />
            <div>
                <div class="d-flex justify-content-end mb-3">
                    <div class="w-5 h-5 closeDialogBtn" role="button">
                        <Close />
                    </div>
                </div>

                <div class="text-center mb-3">
                    <ValidationSummary />
                </div>

                <div class="mb-2">
                    <InputText @bind-Value="Article.Title" id="article-title" class="w-100" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit">Create article</button>
                </div>
            </div>
        </EditForm>
    </dialog>
</div>

@code {
    private IJSObjectReference? module;
    private string ContainerDomId = Guid.NewGuid().ToString();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Pages/Articles/Index/NewArticle.razor.js");
            await module.InvokeVoidAsync("setupEventHandlers", ContainerDomId);
        }
    }

    [SupplyParameterFromForm]
    private Article Article { get; set; } = new("");

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(Article);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(Article.Title);

        Article? article = await ApiService.PostArticle(Article);
        ArgumentNullException.ThrowIfNull(article);

        Navigation.NavigateTo($"articles/{article.Id}");
    }

    private void LogInvalidSubmit()
    {
        Logger.LogInformation("it was invalid");
    }
}