@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.WebApp.Client.Shared.Heroicons

@inject ILogger<object> logger

<li>
    <div class="d-flex justify-content-between align-items-center">
        <div class="flex-grow-1 d-flex px-4 py-2
                    @(searchTarget == true ? "border-highlight" : "")
                    hover:bg-primary-light align-items-center" @onclick="ExpandOrCollapse">
            <div class="w-5 h-5 flex-none mr-2">
            @if (expanded == false)
            {
                <ChevronRight />
            }
            else
            {
                <ChevronDown />
            }
            </div>
            <NavLink href="@($"articles/{Article.Id}")" class="word-break-all mr-2">@Article.Title</NavLink>
        </div>
    </div>

    <ul class="pl-4 @(expanded==false ? "d-none" : "")">
        @foreach (Article article in Article.ChildArticles)
        {
            <ArticlesTreeNode   Article="@article"
                                @bind-Articles="@Articles"
                                ParentExpand="@Expand" />
        }

        <NewArticle @bind-Articles="@Articles" ParentArticle="@Article" />
    </ul>
</li>

@code {
    [CascadingParameter(Name="CurrentArticle")]
    public Article? CurrentArticle { get; set; }

    [CascadingParameter(Name="ArticlesSearch")]
    public string? ArticlesSearch { get; set; }

    protected override void OnParametersSet()
    {
        searchTarget = false;

        if (CurrentArticle != null && CurrentArticle.Id == Article.Id)
        {
            Article = CurrentArticle;
        }

        if (String.IsNullOrWhiteSpace(ArticlesSearch)) return; 

        if (Article.Title.Contains(ArticlesSearch))
        {
            ExpandParent();
            searchTarget = true;
        }
    }

    [Parameter]
    public Article Article { get; set; } = null!;

    [Parameter]
    public List<Article> Articles { get; set; } = null!;

    [Parameter]
    public EventCallback<List<Article>> ArticlesChanged { get; set; }

    private bool expanded = false;
    private bool searchTarget = false;

    private void ExpandOrCollapse()
    {
        expanded = !expanded;
    }

    private void Expand()
    {
        expanded = true;
        ExpandParent();
    }

    private void ExpandParent()
    {
        if (ParentExpand != null)
        {
            ParentExpand.Invoke();
        }
    }

    [Parameter]
    public Action? ParentExpand { get; set; }
}