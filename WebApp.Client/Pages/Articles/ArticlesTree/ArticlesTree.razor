@implements IDisposable

@using System.Text.Json
@using System.Text.Json.Serialization
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@using System.Security.Claims
@using AnkiBooks.ApplicationCore.Services

@inject IUserArticleService UserArticleService
@inject ILogger<ArticlesTree> Logger
@inject PersistentComponentState ApplicationState

<div>
    @if (articles == null)
    {
        <p class="p-4 text-center">Requesting articles...</p>
    }
    else
    {
        <div class="m-4">
            <InputText @bind-Value="@articlesSearch" type="search" class="p-1 w-100-percent" placeholder="Search articles:" />
        </div>

        <CascadingValue Value="@articlesSearch" Name="ArticlesSearch">
        <ul>
            @for(int i = 0; i < articles.Count; i++)
            {
                Article article = articles[i];

                <ArticlesTreeNode @bind-Articles="@articles" Article="@article" />
            }
        </ul>
        </CascadingValue>

        <NewArticle @bind-Articles="@articles" ParentArticle="@(null)" />
    }
</div>

@code {
    public string articlesSearch = "";

    private List<Article>? articles;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<List<Article>>(nameof(articles), out var restored))
        {
            articles = await UserArticleService.GetUserArticles();
        }
        else
        {
            articles = restored;
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(articles), articles);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}