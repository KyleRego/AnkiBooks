@using System.Text.Json
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Services
@using AnkiBooks.WebApp.Client.Shared.Heroicons
@using System.Security.Claims

@inject IUserArticleService UserArticleService
@inject NavigationManager Navigation
@inject IConfiguration Config
@inject ILogger<NewArticle> Logger
@inject IJSRuntime JS

<div id="@ContainerDomId">

    <div class="d-flex px-4 py-2 hover:bg-primary-light align-items-center
                    show-dialog-button" role="button">
        <div class="w-5 h-5 flex-none mr-2">
            <Plus />
        </div>
        <div>
            New article
        </div>
    </div>

    <dialog class="p-2 border-primary">
        <EditForm   Model="Article"
                    OnValidSubmit="SubmitForm"
                    OnInvalidSubmit="LogInvalidSubmit"
                    FormName="NewArticle">

            <DataAnnotationsValidator />
            <div>
                <div class="d-flex justify-content-end mb-3">
                    <div class="w-5 h-5 close-dialog-button" role="button">
                        <Close />
                    </div>
                </div>

                <div class="text-center mb-3">
                    <ValidationSummary />
                </div>

                <div class="mb-2">
                    <InputText @bind-Value="Article.Title" id="article-title" class="w-100" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit">Create article</button>
                </div>
            </div>
        </EditForm>
    </dialog>
</div>

@code {
    [Parameter]
    public Article? ParentArticle { get; set; } = null!;

    [Parameter]
    public List<Article> Articles { get; set; } = null!;
    
    [Parameter]
    public EventCallback<List<Article>> ArticlesChanged { get; set; }

    private IJSObjectReference? module;
    private string ContainerDomId = Guid.NewGuid().ToString();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Pages/Articles/ArticlesTree/NewArticle.razor.js");
            await module.InvokeVoidAsync("setupDialog", ContainerDomId);
        }
    }

    [SupplyParameterFromForm]
    private Article Article { get; set; } = new("");

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(Article);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(Article.Title);
        Article.ParentArticleId = ParentArticle?.Id;

        Article? article = await UserArticleService.PostUserArticle(Article);
        ArgumentNullException.ThrowIfNull(article);
        Articles.Add(article);
        await ArticlesChanged.InvokeAsync(Articles);
        Navigation.NavigateTo($"articles/{article.Id}");

        // Reset the dialog
        Article = new("");
        await module!.InvokeVoidAsync("setupDialog", ContainerDomId);
    }

    private void LogInvalidSubmit()
    {
        Logger.LogInformation("it was invalid");
    }
}