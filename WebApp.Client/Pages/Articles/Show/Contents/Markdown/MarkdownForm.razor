@using AnkiBooks.ApplicationCore.Entities
@inject IJSRuntime JS

<EditForm Model="MarkdownContent" OnValidSubmit="SubmitForm">
<DataAnnotationsValidator />
<ValidationSummary />

<div class="border-primary-thin" id="@ContainerDomId">
    <div class="px-2 pt-2 pb-1">
        <div class="d-flex flex-column">
            <div class="bg-tertiary border-bottom-secondary p-2 d-flex justify-content-between">
                <div class="d-flex justify-content-start">
                    <div role="button" class="markdown-bold-button mr-2" title="Bold">
                        Bold
                    </div>
                    <div role="button" class="markdown-italic-button mr-2" title="Italic">
                        Italic
                    </div>
                    <div role="button" class="markdown-strike-button" title="Strikethrough">
                        Strike
                    </div>
                </div>
                <div class="d-flex justify-content-start">
                    <div role="button" class="markdown-heading-1-button mr-2" title="H1">
                        H1
                    </div>
                    <div role="button" class="markdown-heading-2-button mr-2" title="H2">
                        H2
                    </div>
                    <div role="button" class="markdown-heading-3-button mr-2" title="H3">
                        H3
                    </div>
                    <div role="button" class="markdown-heading-4-button mr-2" title="H4">
                        H4
                    </div>
                    <div role="button" class="markdown-heading-5-button mr-2" title="H5">
                        H5
                    </div>
                    <div role="button" class="markdown-heading-6-button mr-2" title="H6">
                        H6
                    </div>
                </div>
                <div>
                    <div role="button" class="markdown-link-button">
                        Link
                    </div>
                </div>
            </div>
            <InputTextArea  @bind-Value="MarkdownContent.Text" class="p-2 mb-1" rows="20" />

            <div class="d-flex justify-content-center">
                <button type="submit">
                    @SubmitButtonText()
                </button>
            </div>
        </div>
    </div>
</div>

</EditForm>

@code {
    [Parameter]
    public MarkdownContent StartingMarkdown { get; set; } = null!;

    protected override void OnInitialized()
    {
        MarkdownContent = StartingMarkdown;
    }

    [Parameter]
    public bool EditingExisting { get; set; }

    private string SubmitButtonText()
    {
        return EditingExisting ? "Update" : "Create";
    }

    [Parameter]
    public Func<MarkdownContent, Task> ParentSubmitMethod { get; set; } = null!;

    public async Task SubmitForm()
    {
        await ParentSubmitMethod.Invoke(MarkdownContent);
    }

    [SupplyParameterFromForm]
    public MarkdownContent MarkdownContent { get; set; } = null!;

    private IJSObjectReference? module;

    private string ContainerDomId = Guid.NewGuid().ToString();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Pages/Articles/Show/Contents/Markdown/MarkdownForm.razor.js");
            await module.InvokeVoidAsync("setupEventHandlers", ContainerDomId);
        }
    }
}