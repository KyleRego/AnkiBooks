@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Enums
@using AnkiBooks.ApplicationCore.Interfaces
@inject ILogger<NewMarkdown> Logger
@inject IAnkiBooksApiService ApiService

<MarkdownForm  StartingMarkdown="@StartingMarkdown()"
                EditingExisting="false"
                ParentSubmitMethod="@SubmitForm" />

@code {
    [CascadingParameter(Name="ArticleId")]
    public string ArticleId { get; set; } = null!;

    [Parameter]
    public ArticleElementType? DropDownItemSelected { get; set; }

    [Parameter]
    public EventCallback<ArticleElementType?> DropDownItemSelectedChanged { get; set; }

    [Parameter]
    public int OrdinalPosition { get; set; }

    [Parameter]
    public OrderedElementsContainer<ArticleElement> ElementsContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer<ArticleElement>?> ElementsContainerChanged { get; set; }

    private MarkdownContent StartingMarkdown()
    {
        return new()
        {
            ArticleId = ArticleId
        };
    }

    private async Task SubmitForm(MarkdownContent newMarkdownContent)
    {
        newMarkdownContent.OrdinalPosition = OrdinalPosition;

        MarkdownContent? createdContent = (MarkdownContent?)await ApiService.PostElement(newMarkdownContent);
        ArgumentNullException.ThrowIfNull(createdContent);

        ElementsContainer.Add(createdContent);
        await ElementsContainerChanged.InvokeAsync(ElementsContainer);
        DropDownItemSelected = null;
        await DropDownItemSelectedChanged.InvokeAsync(DropDownItemSelected);
    }
}