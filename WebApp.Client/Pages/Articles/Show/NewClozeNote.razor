@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@inject ILogger<NewBasicNote> Logger
@inject HttpClient Http

<div class="d-flex justify-content-center my-2">
    <RadzenCard Variant="Variant.Outlined" Style="width: 32rem">
        <EditForm Model="ClozeNote" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <RadzenStack Gap="10">
                <RadzenTextArea @bind-Value="ClozeNote!.Text" id="Text" />
        
                <div class="d-flex justify-content-center">
                    <RadzenButton type="submit" Text="Create" Variant="Variant.Outlined" Size="ButtonSize.Small" />
                </div>
            </RadzenStack>
        </EditForm>
    </RadzenCard>
</div>

@code {
    [Parameter]
    public string ArticleId { get; set; } = null!;

    [Parameter]
    public IArticleElement? PairedElement { get; set; }

    [Parameter]
    public OrderedElementsContainer OrderedElementsContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer> OrderedElementsContainerChanged { get; set; }

    [Parameter]
    public bool HideSplitButtonAndShowForm { get; set; }

    [Parameter]
    public EventCallback<bool> HideSplitButtonAndShowFormChanged { get; set; }

    // TODO: Do not hard code the backend origin
    private const string endpoint = "http://localhost:5247/api/ClozeNotes";

    [SupplyParameterFromForm]
    public ClozeNote? ClozeNote { get; set; }

    protected override void OnInitialized()
    {
        // Set ArticleId here so the form can be submitted (otherwise it is not valid)
        ClozeNote = new()
        {
            ArticleId = ArticleId
        };
    }

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(ClozeNote);
        ArgumentNullException.ThrowIfNull(ClozeNote.Text);
        ArgumentNullException.ThrowIfNull(ArticleId);

        int ordinalPosition = (PairedElement != null) ? 
                                    OrderedElementsContainer.GetOrdinalPosition(PairedElement) : 
                                    OrderedElementsContainer.Count();

        ClozeNote data = new ClozeNote
            {
                Text = ClozeNote.Text,
                ArticleId = ArticleId,
                OrdinalPosition = ordinalPosition
            };
        HttpResponseMessage response = await Http.PostAsJsonAsync(endpoint, data);
        response.EnsureSuccessStatusCode();

        string responseBody = await response.Content.ReadAsStringAsync();
        JsonSerializerOptions jsonOptions = new()
            {
                PropertyNameCaseInsensitive = true
            };
        ClozeNote? clozeNote = JsonSerializer.Deserialize<ClozeNote>(responseBody, jsonOptions);
        ArgumentNullException.ThrowIfNull(clozeNote);

        await AddToElements(clozeNote);
    }

    private async Task AddToElements(ClozeNote clozeNote)
    {
        OrderedElementsContainer.Add(clozeNote);
        await OrderedElementsContainerChanged.InvokeAsync(OrderedElementsContainer);
        HideSplitButtonAndShowForm = false;
        await HideSplitButtonAndShowFormChanged.InvokeAsync(HideSplitButtonAndShowForm);
    }
}