@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AnkiBooks.Models;
@inject ILogger<NewBasicNote> Logger
@inject HttpClient Http

@if (hideThisComponent != true)
{
    <div class="d-flex justify-content-center my-2">
        <RadzenCard Variant="Variant.Outlined" Style="width: 32rem">
            <EditForm Model="ClozeNote" OnValidSubmit="SubmitForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <RadzenStack Gap="10">
                    <RadzenTextArea @bind-Value="ClozeNote!.Text" id="Text" />
            
                    <div class="d-flex justify-content-center">
                        <RadzenButton type="submit" Text="Create" Variant="Variant.Outlined" Size="ButtonSize.Small" />
                    </div>
                </RadzenStack>
            </EditForm>
        </RadzenCard>
    </div>
}

@code {
    private bool hideThisComponent = false;

    [Parameter]
    public Article Article { get; set; } = null!;

    [Parameter]
    public EventCallback<Article> ArticleChanged { get; set; }

    [Parameter]
    public int OrdinalPosition { get; set; }

    private async Task AddClozeNoteToArticle(ClozeNote clozeNote)
    {
        Article.ClozeNotes.Add(clozeNote);
        await ArticleChanged.InvokeAsync(Article);
    }

    // TODO: Do not hard code the backend origin
    private const string endpoint = "http://localhost:5247/api/ClozeNotes";

    [SupplyParameterFromForm]
    public ClozeNote? ClozeNote { get; set; }

    protected override void OnInitialized()
    {
        ClozeNote = new()
        {
            ArticleId = Article.Id,
            OrdinalPosition = OrdinalPosition
        };
    }

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(ClozeNote);
        ArgumentNullException.ThrowIfNull(ClozeNote.Text);
        ArgumentNullException.ThrowIfNull(ClozeNote.ArticleId);

        ClozeNote data = new ClozeNote
            {
                Text = ClozeNote.Text,
                ArticleId = ClozeNote.ArticleId,
                OrdinalPosition = ClozeNote.OrdinalPosition
            };
        HttpResponseMessage response = await Http.PostAsJsonAsync(endpoint, data);
        response.EnsureSuccessStatusCode();

        string responseBody = await response.Content.ReadAsStringAsync();
        JsonSerializerOptions jsonOptions = new()
            {
                PropertyNameCaseInsensitive = true
            };
        ClozeNote? clozeNote = JsonSerializer.Deserialize<ClozeNote>(responseBody, jsonOptions);
        ArgumentNullException.ThrowIfNull(clozeNote);

        await AddClozeNoteToArticle(clozeNote);
        hideThisComponent = true;
    }
}