@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AnkiBooks.Models;
@inject ILogger<NewBasicNote> Logger
@inject HttpClient Http

@if (hideThisComponent != true)
{
<div class="p-2">
    <div>
        New Basic Note
    </div>
    <div>
        <EditForm Model="BasicNote" OnValidSubmit="SubmitForm" FormName="AddLinkForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-2">
                <label for="Front" class="mb-1">Front:</label>    
                <InputTextArea @bind-Value="BasicNote!.Front" id="Front" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="Back" class="mb-1">Back:</label>
                <InputTextArea @bind-Value="BasicNote.Back" id="Back" class="form-control" />
            </div>

            <div>
                <RadzenButton Text="Create" />
            </div>
        </EditForm>
    </div>
</div>
}

@code {
    private bool hideThisComponent = false;

    [Parameter]
    public Article Article { get; set; } = null!;

    [Parameter]
    public EventCallback<Article> ArticleChanged { get; set; }

    [Parameter]
    public int OrdinalPosition { get; set; }

    private async Task AddBasicNoteToArticle(BasicNote basicNote)
    {
        Article.BasicNotes.Add(basicNote);
        await ArticleChanged.InvokeAsync(Article);
    }

    // TODO: Do not hard code the backend origin
    private const string endpoint = "http://localhost:5247/api/BasicNotes";

    [SupplyParameterFromForm]
    public BasicNote? BasicNote { get; set; }

    protected override void OnInitialized()
    {
        BasicNote = new()
        {
            ArticleId = Article.Id,
            OrdinalPosition = OrdinalPosition
        };
    }

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(BasicNote);
        ArgumentNullException.ThrowIfNull(BasicNote.Front);
        ArgumentNullException.ThrowIfNull(BasicNote.Back);
        ArgumentNullException.ThrowIfNull(BasicNote.ArticleId);

        BasicNote data = new BasicNote
                            {
                                Front = BasicNote.Front,
                                Back = BasicNote.Back,
                                ArticleId = BasicNote.ArticleId
                            };
        HttpResponseMessage response = await Http.PostAsJsonAsync(endpoint, data);
        response.EnsureSuccessStatusCode();

        string responseBody = await response.Content.ReadAsStringAsync();
        JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true
        };
        BasicNote? basicNote = JsonSerializer.Deserialize<BasicNote>(responseBody, jsonOptions);
        ArgumentNullException.ThrowIfNull(basicNote);

        await AddBasicNoteToArticle(basicNote);
        hideThisComponent = true;
    }
}