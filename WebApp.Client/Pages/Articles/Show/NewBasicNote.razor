@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@inject ILogger<NewBasicNote> Logger
@inject HttpClient Http

@if (hideThisComponent != true)
{
    <div class="d-flex justify-content-center my-2">
        <RadzenCard Variant="Variant.Outlined" Style="width: 32rem">
            <EditForm Model="BasicNote" OnValidSubmit="SubmitForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <RadzenStack Gap="10">
                    <RadzenTextArea @bind-Value="BasicNote!.Front" id="Front" />
                    
                    <RadzenTextArea @bind-Value="BasicNote.Back" id="Back" />
            
                    <div class="d-flex justify-content-center">
                        <RadzenButton type="submit" Text="Create" Variant="Variant.Outlined" Size="ButtonSize.Small" />
                    </div>
                </RadzenStack>
            </EditForm>
        </RadzenCard>
    </div>
}

@code {
    private bool hideThisComponent = false;

    [Parameter]
    public string ArticleId { get; set; } = null!;

    [Parameter]
    public IArticleElement? PairedElement { get; set; }

    [Parameter]
    public OrderedElementsContainer OrderedElementsContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer> OrderedElementsContainerChanged { get; set; }

    // TODO: Do not hard code the backend origin
    private const string endpoint = "http://localhost:5247/api/BasicNotes";

    [SupplyParameterFromForm]
    public BasicNote? BasicNote { get; set; }

    protected override void OnInitialized()
    {
        // Set ArticleId here so that the form can be submitted (otherwise it is not valid)
        BasicNote = new()
        {
            ArticleId = ArticleId
        };
    }

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(BasicNote);
        ArgumentNullException.ThrowIfNull(BasicNote.Front);
        ArgumentNullException.ThrowIfNull(BasicNote.Back);
        ArgumentNullException.ThrowIfNull(ArticleId);

        int ordinalPosition = (PairedElement != null) ? 
                                    OrderedElementsContainer.GetOrdinalPosition(PairedElement) : 
                                    OrderedElementsContainer.Count();
        
        BasicNote data = new BasicNote
            {
                Front = BasicNote.Front,
                Back = BasicNote.Back,
                ArticleId = ArticleId,
                OrdinalPosition = ordinalPosition
            };
        HttpResponseMessage response = await Http.PostAsJsonAsync(endpoint, data);
        response.EnsureSuccessStatusCode();

        string responseBody = await response.Content.ReadAsStringAsync();
        JsonSerializerOptions jsonOptions = new()
            {
                PropertyNameCaseInsensitive = true
            };
        BasicNote? basicNote = JsonSerializer.Deserialize<BasicNote>(responseBody, jsonOptions);
        ArgumentNullException.ThrowIfNull(basicNote);

        await AddToElements(basicNote);
        hideThisComponent = true;
    }

    private async Task AddToElements(BasicNote basicNote)
    {
        OrderedElementsContainer.Add(basicNote);
        await OrderedElementsContainerChanged.InvokeAsync(OrderedElementsContainer);
    }
}