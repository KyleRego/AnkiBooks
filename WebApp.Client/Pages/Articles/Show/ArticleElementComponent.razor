@using AnkiBooks.ApplicationCore.Entities
@inherits ChangesOrderedElementsContainerBase
@inject IAnkiBooksApiService ApiService
@inject DialogService DialogService

@if (editing == false)
{
    <div class="d-flex justify-content-center my-2">
        <RadzenCard Variant="Variant.Outlined" Style="width: 32rem; height: 8rem;">
            <div class="d-flex align-items-center h-100 w-100">
                <FlippableElement ArticleElement="@ArticleElement" />

                <div class="d-flex flex-column justify-content-around align-items-center ms-2 me-2 h-100">
                    <RadzenButton Text="Edit" Click="@BeginEditing" Variant="Variant.Outlined" Size="ButtonSize.Small" />
                    <RadzenButton Text="Delete" Click="@ShowInlineDialog" ButtonStyle="ButtonStyle.Danger"
                        Variant="Variant.Outlined" Size="ButtonSize.Small" />
                    <span>@ArticleElement.OrdinalPosition</span>
                </div>
            </div>
        </RadzenCard>
    </div>
}
else
{
    <EditElement ArticleElement="@ArticleElement" @bind-Editing="@editing" />
}

@code {
    [Parameter]
    public ArticleElementBase ArticleElement { get; set; } = null!;

    private bool editing = false;

    private void BeginEditing()
    {
        editing = true;
    }

    async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Confirmation", ds =>
            @<div>
                <div class="mb-4">
                    <span>Are you sure you want to delete this element?</span>
                </div>

                <RadzenCard Variant="Variant.Outlined">
                    <FlippableElement ArticleElement="@ArticleElement" />
                </RadzenCard>

                <div class="mt-4 d-flex justify-content-around">
                    <RadzenButton   Text="Yes" 
                                    Click="async () =>
                                    {
                                        await DeleteElement();
                                        ds.Close(true);
                                    }"
                                    Variant="Variant.Outlined"
                                    ButtonStyle="ButtonStyle.Danger"
                                    Style="margin-bottom: 10px; width: 150px" />

                    <RadzenButton   Text="Cancel"
                                    Click="() => ds.Close(false)"
                                    Variant="Variant.Outlined"
                                    ButtonStyle="ButtonStyle.Secondary"
                                    Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>);
    }
    private async Task DeleteElement()
    {
        if (ArticleElement is BasicNote)
        {
            await ApiService.DeleteBasicNote(ArticleElement.Id);
        }

        OrderedElementsContainer.Remove(ArticleElement);
        await OrderedElementsContainerChanged.InvokeAsync(OrderedElementsContainer);
    }
}