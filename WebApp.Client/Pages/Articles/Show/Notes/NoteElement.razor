@using AnkiBooks.ApplicationCore.Entities
@using System.Text.Json
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.WebApp.Client.Services
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes.Basic
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes.Cloze
@using AnkiBooks.WebApp.Client.Shared.Heroicons
@inject IAnkiBooksApiService ApiService
@inject ILogger<NoteElement> logger
@inject DragStateService dragState

@if (editing == false)
{
    <div class="border-primary">
        <div class="d-flex justify-content-between p-1">
            <div class="w-5 h-5" role="button" @onclick="BeginEditing">
                <Edit />
            </div>
            <div class="w-5 h-5" role="button" @onclick="DeleteElement">
                <Delete />
            </div>
        </div>
        <div class="border-top-primary @(nestedDragLevels != 0 ? "highlight-dropzone" : "")"

                    draggable="true"
                    @ondragstart="HandleDrag"
                    @ondragend="HandleDragEnd"
                    @ondragenter="HandleDragEnter" @ondragenter:preventDefault
                    ondragover="event.preventDefault();"
                    @ondragleave="HandleDragLeave" @ondragleave:preventDefault
                    @ondrop="HandleDrop">
            @switch (Note)
            {
                case BasicNote basicNote:
                    <ShowBasicNote BasicNoteFront="@basicNote.Front" BasicNoteBack="@basicNote.Back" />
                    break;

                case ClozeNote clozeNote:
                    <ShowClozeNote ClozeNoteText="@clozeNote.Text" />
                    break;
            }
        </div>
    </div>
}
else
{
    @switch (Note)
    {
        case BasicNote basicNote:
            <EditBasicNote StartingBasicNote="@basicNote" @bind-Editing="@editing" />
            break;

        case ClozeNote clozeNote:
            <EditClozeNote StartingClozeNote="@clozeNote" @bind-Editing="@editing" />
            break;
    }
}

@code {
[Parameter]
    public OrderedElementsContainer<INote> NotesContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer<INote>> NotesContainerChanged { get; set; }
    
    [Parameter]
    public INote Note { get; set; } = null!;

    private bool editing = false;

    private void BeginEditing()
    {
        editing = true;
    }

    private async Task DeleteElement()
    {
        await ApiService.DeleteNote(Note);

        NotesContainer.Remove(Note);
        await NotesContainerChanged.InvokeAsync(NotesContainer);
    }

    protected void HandleDrag()
    {
        logger.LogInformation("drag");
        dragState.DraggedElement = Note;
    }

    protected void HandleDragEnd()
    {
        logger.LogInformation("dragend");
        dragState.DraggedElement = null;
    }

    protected int nestedDragLevels = 0;

    protected void HandleDragEnter()
    {
        INote? draggedElement = dragState.DraggedElement;

        if (draggedElement == null) return;
        if (draggedElement == Note) return;
        logger.LogInformation("dragenter");
        nestedDragLevels += 1;
    }

    protected void HandleDragLeave()
    {
        INote? draggedElement = dragState.DraggedElement;

        if (draggedElement == null) return;
        if (draggedElement == Note) return;
        logger.LogInformation("dragleave");

        nestedDragLevels -= 1;
    }

    protected async Task HandleDrop()
    {
        nestedDragLevels = 0;
        logger.LogInformation("drop");
        INote? droppedElement = dragState.DraggedElement;

        if (droppedElement == null) return;
        if (droppedElement == Note) return;

        droppedElement.OrdinalPosition = Note.OrdinalPosition;

        // TODO: Fix drag and drop stuff
        @* await ApiService.PutNote(droppedElement); *@

        NotesContainer.UpdatePosition(droppedElement);
        await NotesContainerChanged.InvokeAsync(NotesContainer);
    }
}
