@using AnkiBooks.ApplicationCore.Entities
@using System.Text.Json
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.WebApp.Client.Services
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes.Basic
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes.Cloze
@inherits ChangesOrderedElementsContainerBase
@inject IAnkiBooksApiService ApiService
@inject ILogger<NoteElement> logger
@inject DragStateService dragState

@if (editing == false)
{
    <div class="d-flex align-items-stretch">

        <div class="min-w-0 flex-grow-1
                    d-flex flex-column justify-content-center
                    @(nestedDragLevels != 0 ? "highlight-dropzone" : "")"

                    draggable="true"
                    @ondragstart="HandleDrag"
                    @ondragend="HandleDragEnd"
                    @ondragenter="HandleDragEnter" @ondragenter:preventDefault
                    ondragover="event.preventDefault();"
                    @ondragleave="HandleDragLeave" @ondragleave:preventDefault
                    @ondrop="HandleDrop">
            @switch (ArticleElement)
            {
                case BasicNote basicNote:
                    <ShowBasicNote BasicNoteFront="@basicNote.Front" BasicNoteBack="@basicNote.Back" />
                    break;

                case ClozeNote clozeNote:
                    <ShowClozeNote ClozeNoteText="@clozeNote.Text" />
                    break;
            }
        </div>

        <div class="flex-grow-0 d-flex flex-column justify-content-around p-1">
            <div role="button" @onclick="BeginEditing">
                Edit
            </div>

            <div role="button" @onclick="DeleteElement">
                Delete
            </div>
        </div>
    </div>
}
else
{
    @switch (ArticleElement)
    {
        case BasicNote basicNote:
            <EditBasicNote StartingBasicNote="@basicNote" @bind-Editing="@editing" />
            break;

        case ClozeNote clozeNote:
            <EditClozeNote StartingClozeNote="@clozeNote" @bind-Editing="@editing" />
            break;
    }
}

@code {
    [Parameter]
    public IArticleElement ArticleElement { get; set; } = null!;

    private bool editing = false;

    private void BeginEditing()
    {
        editing = true;
    }

    private async Task DeleteElement()
    {
        await ApiService.DeleteArticleElement(ArticleElement);

        OrderedElementsContainer.Remove(ArticleElement);
        await OrderedElementsContainerChanged.InvokeAsync(OrderedElementsContainer);
    }

    protected void HandleDrag()
    {
        logger.LogInformation("drag");
        dragState.DraggedElement = ArticleElement;
    }

    protected void HandleDragEnd()
    {
        logger.LogInformation("dragend");
        dragState.DraggedElement = null;
    }

    protected int nestedDragLevels = 0;

    protected void HandleDragEnter()
    {
        IArticleElement? draggedElement = dragState.DraggedElement;

        if (draggedElement == null) return;
        if (draggedElement == ArticleElement) return;
        logger.LogInformation("dragenter");
        nestedDragLevels += 1;
    }

    protected void HandleDragLeave()
    {
        IArticleElement? draggedElement = dragState.DraggedElement;

        if (draggedElement == null) return;
        if (draggedElement == ArticleElement) return;
        logger.LogInformation("dragleave");

        nestedDragLevels -= 1;
    }

    protected async Task HandleDrop()
    {
        nestedDragLevels = 0;
        logger.LogInformation("drop");
        IArticleElement? droppedElement = dragState.DraggedElement;

        if (droppedElement == null) return;
        if (droppedElement == ArticleElement) return;

        droppedElement.OrdinalPosition = ArticleElement.OrdinalPosition;

        await ApiService.PutArticleElement(droppedElement);

        OrderedElementsContainer.UpdatePosition(droppedElement);
        await OrderedElementsContainerChanged.InvokeAsync(OrderedElementsContainer);
    }
}
