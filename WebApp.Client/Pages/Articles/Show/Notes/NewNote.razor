@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Enums
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes.Basic
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes.Cloze

@if (dropDownItemSelected == null)
{
    <div class="my-2 d-flex justify-content-center">
        <InputSelect @bind-Value="dropDownItemSelected" name="new-element">
            <option value="" selected>New note</option>
            <option value="@NoteType.BasicNote">Basic note</option>
            <option value="@NoteType.ClozeNote">Cloze note</option>
        </InputSelect>
    </div>
}
else
{
    @switch (dropDownItemSelected)
    {
        case NoteType.BasicNote:
            <NewBasicNote   @bind-NotesContainer:get="NotesContainer"
                            @bind-NotesContainer:set="NotesContainerChanged"
                            @bind-DropDownItemSelected="dropDownItemSelected"
                            OrdinalPosition="@OrdinalPosition" />
            break;
        case NoteType.ClozeNote:
            <NewClozeNote   @bind-NotesContainer:get="NotesContainer"
                            @bind-NotesContainer:set="NotesContainerChanged"
                            @bind-DropDownItemSelected="dropDownItemSelected"
                            OrdinalPosition="@OrdinalPosition" />
            break;

        default:
            break;

    }
}

@code {
[Parameter]
    public OrderedElementsContainer<INote> NotesContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer<INote>> NotesContainerChanged { get; set; }

    [Parameter]
    public int OrdinalPosition { get; set; }

    private NoteType? dropDownItemSelected = null;
}