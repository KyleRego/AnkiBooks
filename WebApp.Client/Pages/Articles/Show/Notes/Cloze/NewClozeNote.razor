@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Enums
@using AnkiBooks.ApplicationCore.Interfaces
@inject ILogger<NewClozeNote> Logger
@inject IAnkiBooksApiService ApiService

<ClozeNoteForm  StartingClozeNote="@StartingClozeNote()"
                EditingExisting="false"
                ParentSubmitMethod="@SubmitForm" />

@code {
    [Parameter]
    public OrderedElementsContainer<INote> NotesContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer<INote>> NotesContainerChanged { get; set; }
    
    [CascadingParameter(Name="SectionId")]
    public string SectionId { get; set; } = null!;

    [Parameter]
    public int OrdinalPosition { get; set; }

    [Parameter]
    public NoteType? DropDownItemSelected { get; set; }

    [Parameter]
    public EventCallback<NoteType?> DropDownItemSelectedChanged { get; set; }

    private ClozeNote StartingClozeNote()
    {
        return new()
        {
            SectionId = SectionId
        };
    }

    private async Task SubmitForm(ClozeNote newClozeNote)
    {
        ArgumentNullException.ThrowIfNull(newClozeNote.Text);
        ArgumentNullException.ThrowIfNull(newClozeNote.SectionId);

        newClozeNote.OrdinalPosition = OrdinalPosition;
        
        ClozeNote? createdClozeNote = (ClozeNote?)await ApiService.PostNote(newClozeNote);
        ArgumentNullException.ThrowIfNull(createdClozeNote);

        NotesContainer.Add(createdClozeNote);
        await NotesContainerChanged.InvokeAsync(NotesContainer);

        DropDownItemSelected = null;
        await DropDownItemSelectedChanged.InvokeAsync(DropDownItemSelected);
    }
}