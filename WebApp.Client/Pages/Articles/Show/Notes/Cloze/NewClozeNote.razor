@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Enums
@using AnkiBooks.ApplicationCore.Interfaces
@inject ILogger<NewClozeNote> Logger
@inject IAnkiBooksApiService ApiService

<ClozeNoteForm  StartingClozeNote="@StartingClozeNote()"
                EditingExisting="false"
                ParentSubmitMethod="@SubmitForm" />

@code {
    [Parameter]
    public OrderedElementsContainer<ArticleElement> ElementsContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer<ArticleElement>> ElementsContainerChanged { get; set; }
    
    [CascadingParameter(Name="ArticleId")]
    public string ArticleId { get; set; } = null!;

    [Parameter]
    public int OrdinalPosition { get; set; }

    [Parameter]
    public ArticleElementType? DropDownItemSelected { get; set; }

    [Parameter]
    public EventCallback<ArticleElementType?> DropDownItemSelectedChanged { get; set; }

    private ClozeNote StartingClozeNote()
    {
        return new()
        {
            ArticleId = ArticleId
        };
    }

    private async Task SubmitForm(ClozeNote newClozeNote)
    {
        ArgumentNullException.ThrowIfNull(newClozeNote.Text);
        ArgumentNullException.ThrowIfNull(newClozeNote.ArticleId);

        newClozeNote.OrdinalPosition = OrdinalPosition;
        
        ClozeNote? createdClozeNote = (ClozeNote?)await ApiService.PostElement(newClozeNote);
        ArgumentNullException.ThrowIfNull(createdClozeNote);

        ElementsContainer.Add(createdClozeNote);
        await ElementsContainerChanged.InvokeAsync(ElementsContainer);

        DropDownItemSelected = null;
        await DropDownItemSelectedChanged.InvokeAsync(DropDownItemSelected);
    }
}