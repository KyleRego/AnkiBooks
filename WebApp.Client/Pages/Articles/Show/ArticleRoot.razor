@using System.Text.Json
@using AnkiBooks.ApplicationCore
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@inject IConfiguration Config
@inject IAnkiBooksApiService ApiService
@inject ILogger<ArticleRoot> Logger
@inject PersistentComponentState ApplicationState
@implements IDisposable

@rendermode InteractiveWebAssembly

<PageTitle>@article.Title</PageTitle>

@if (article == null || SectionsContainer == null)
{
    <PageTitle>Loading article...</PageTitle>

    <p>Loading article...</p>
}
else
{
    List<Section> sections = SectionsContainer.OrderedElements;

    <CascadingValue Value="@article.Id" Name="ArticleId">
        <article class="px-4">
            <div>
                @if (sections.Count == 0)
                {
                    @* something went wrong  *@
                }
                else
                {
                    @for (int i = 0; i < sections.Count; i++)
                    {
                        Section section = sections[i];

                        <SectionRoot Section="@(section)" @bind-SectionsContainer="SectionsContainer" />
                    }
                }
            </div>
        </article>
    </CascadingValue>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private OrderedElementsContainer<Section>? SectionsContainer;

    private Article? article;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnParametersSetAsync()
    {
        ArgumentNullException.ThrowIfNull(Id);

        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<Article>(nameof(article), out var restored))
        {
            article = await ApiService.GetArticle(Id);
            Logger.LogInformation(JsonSerializer.Serialize(article));
        }
        else
        {
            article = restored;
        }

        ArgumentNullException.ThrowIfNull(article);
        SectionsContainer = new(article.OrderedSections());
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(article), article);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}