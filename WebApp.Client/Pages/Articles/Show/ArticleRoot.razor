@page "/articles/{id}"
@using System.Text.Json
@using AnkiBooks.ApplicationCore
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes.Basic
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes.Cloze
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Sections
@layout ArticlesLayout
@inject IConfiguration Config
@inject IAnkiBooksApiService ApiService
@inject ILogger<ArticleRoot> Logger
@inject PersistentComponentState ApplicationState
@implements IDisposable

@rendermode InteractiveWebAssembly

@if (article == null || OrderedSectionsContainer == null)
{
    <PageTitle>Loading article...</PageTitle>

    <p>Loading article...</p>
}
else
{
    List<IOrderedElement> sections = OrderedSectionsContainer.OrderedElements;

    <PageTitle>@article.Title</PageTitle>

    <article>
        <CascadingValue Value="@article.Id" Name="ArticleId">
            @if (sections.Count == 0)
            {
                <NewSection OrdinalPosition="0"
                            @bind-OrderedSectionsContainer="OrderedSectionsContainer"/>
            }
            else
            {
                @for (int i = 0; i < sections.Count; i++)
                {
                    IOrderedElement element = sections[i];

                    if (element is Section sect)
                    {
                        <SectionRoot Section="@sect" @bind-OrderedSectionsContainer="OrderedSectionsContainer" />
                    }
                }
            }
        </CascadingValue>
    </article>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private OrderedElementsContainer? OrderedSectionsContainer;

    private Article? article;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnParametersSetAsync()
    {
        ArgumentNullException.ThrowIfNull(Id);

        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<Article>(nameof(article), out var restored))
        {
            article = await ApiService.GetArticle(Id);
        }
        else
        {
            article = restored;
        }

        ArgumentNullException.ThrowIfNull(article);
        OrderedSectionsContainer = new(article.OrderedElements());
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(article), article);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}