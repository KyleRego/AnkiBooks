@using AnkiBooks.Models
@using AnkiBooks.Models.Enums

<div class="d-flex justify-content-center @dropDownCssClass">
    <RadzenSplitButton  Click=@(args => OnButtonClick(args))
                        Text="Add"
                        Variant="Variant.Outlined"
                        Size="ButtonSize.Small">
        <ChildContent>
            <RadzenSplitButtonItem Text="Basic note" Value="@(ElementType.BasicNote.ToString())" />
            <RadzenSplitButtonItem Text="Cloze note" Value="@(ElementType.ClozeNote.ToString())" />
            <RadzenSplitButtonItem Text="Picture note" Value="3" />
            <RadzenSplitButtonItem Text="Table note" Value="4" />
        </ChildContent>
    </RadzenSplitButton>
</div>

@if (dropDownItemWasSelected)
{
    @switch (dropDownItemSelected)
    {
        case ElementType.BasicNote:
            <NewBasicNote   @bind-Article:get="Article"
                            @bind-Article:set="ArticleChanged"
                            OrdinalPosition="@OrdinalPosition" />
            break;
        case ElementType.ClozeNote:
            <NewClozeNote   @bind-Article:get="Article"
                            @bind-Article:set="ArticleChanged"
                            OrdinalPosition="@OrdinalPosition" />
            break;
        default:
            break;

    }
}

@code {
    [Parameter]
    public Article Article { get; set; } = null!;

    [Parameter]
    public EventCallback<Article> ArticleChanged { get; set; }

    [Parameter]
    public int OrdinalPosition { get; set; }

    private string dropDownCssClass = "";

    private bool dropDownItemWasSelected = false;

    private ElementType? dropDownItemSelected = null;

    private void OnButtonClick(RadzenSplitButtonItem item)
    {
        void ReplaceDropdown()
        {
            dropDownCssClass = "d-none";
            dropDownItemWasSelected = true;
        }

        dropDownItemSelected = (ElementType)Enum.Parse(typeof(ElementType), item.Value);
        ReplaceDropdown();
    }
}