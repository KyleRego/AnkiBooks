@page "/articles/{id}"
@layout ArticlesSidebar
@using System.Text.Json
@using AnkiBooks.ApplicationCore
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@inject IConfiguration Config
@inject IAnkiBooksApiService ApiService
@inject ILogger<Show> Logger
@implements IDisposable
@inject PersistentComponentState ApplicationState

@rendermode InteractiveWebAssembly

@if (article == null || orderedElementsContainer == null)
{
    <PageTitle>Loading article...</PageTitle>

    <p>Loading article...</p>
}
else
{
    <PageTitle>@article.Title</PageTitle>

    @foreach(IArticleElement articleElement in orderedElementsContainer.OrderedElements)
    {
        <AddArticleElementSplitButton @bind-OrderedElementsContainer="@orderedElementsContainer"
                                        ArticleId="@(article.Id)"
                                        PairedElement="@articleElement" />

        if (articleElement is BasicNote)
        {
            BasicNote bn = (BasicNote)articleElement;

            <ShowBasicNote BasicNote="@bn" />
        }
        else if (articleElement is ClozeNote)
        {
            ClozeNote cn = (ClozeNote)articleElement;

            <ShowClozeNote ClozeNote="@cn" />
        }
    }

    <AddArticleElementSplitButton @bind-OrderedElementsContainer="@orderedElementsContainer"
                                    ArticleId="@(article.Id)"
                                    PairedElement="@null" />
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private OrderedElementsContainer? orderedElementsContainer;

    private Article? article;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnParametersSetAsync()
    {
        ArgumentNullException.ThrowIfNull(Id);

        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<Article>(nameof(article), out var restored))
        {
            article = await ApiService.GetArticle(Id);
        }
        else
        {
            article = restored;
        }

        ArgumentNullException.ThrowIfNull(article);
        orderedElementsContainer = new(article.BasicNotes, article.ClozeNotes);
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(article), article);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}