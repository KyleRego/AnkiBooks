@page "/articles/{id}"
@using System.Text.Json
@using AnkiBooks.ApplicationCore
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.BasicNoteComponents
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.ClozeNoteComponents
@layout ArticlesSidebar
@inject IConfiguration Config
@inject IAnkiBooksApiService ApiService
@inject ILogger<Show> Logger
@inject PersistentComponentState ApplicationState
@implements IDisposable

@rendermode InteractiveWebAssembly

@if (article == null || orderedElementsContainer == null)
{
    <PageTitle>Loading article...</PageTitle>

    <p>Loading article...</p>
}
else
{
    <PageTitle>@article.Title</PageTitle>

    <article>
        <CascadingValue Value="@article.Id" Name="ArticleId">
            @foreach(ArticleElementBase articleElement in orderedElementsContainer.OrderedElements)
            {
                <AddArticleElementSplitButton @bind-OrderedElementsContainer="@orderedElementsContainer"
                                                PairedElement="@articleElement" />

                <ArticleElementComponent @bind-OrderedElementsContainer="@orderedElementsContainer"
                                ArticleElement="@articleElement"/>
            }

            <AddArticleElementSplitButton @bind-OrderedElementsContainer="@orderedElementsContainer"
                                            PairedElement="@null" />
        </CascadingValue>
    </article>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private OrderedElementsContainer? orderedElementsContainer;

    private Article? article;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnParametersSetAsync()
    {
        ArgumentNullException.ThrowIfNull(Id);

        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<Article>(nameof(article), out var restored))
        {
            article = await ApiService.GetArticle(Id);
        }
        else
        {
            article = restored;
        }

        ArgumentNullException.ThrowIfNull(article);
        orderedElementsContainer = new(article.BasicNotes, article.ClozeNotes);
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(article), article);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}