@page "/articles/{id}"
@using System.Text.Json
@using AnkiBooks.ApplicationCore
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.BasicNoteComponents
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.ClozeNoteComponents
@layout ArticlesLayout
@inject IConfiguration Config
@inject IAnkiBooksApiService ApiService
@inject ILogger<Show> Logger
@inject PersistentComponentState ApplicationState
@implements IDisposable

@rendermode InteractiveWebAssembly

@if (article == null || ElementsContainer == null)
{
    <PageTitle>Loading article...</PageTitle>

    <p>Loading article...</p>
}
else
{
    List<IArticleElement> elements = ElementsContainer.OrderedElements;

    <PageTitle>@article.Title</PageTitle>

    <article>
        <CascadingValue Value="@article.Id" Name="ArticleId">
            @if (elements.Count < 1)
            {
                <NewElement @bind-OrderedElementsContainer="@ElementsContainer" PairedElement="@null" />
            }
            else
            {
                int k = 0;
                IArticleElement kElement = elements[k];

                @if (kElement is not IArticleContent)
                {
                    <div class="d-flex">
                        @while(kElement is not IArticleContent)
                        {
                            <Element @bind-OrderedElementsContainer="@ElementsContainer" ArticleElement="@kElement" />
                            k += 1;
                            kElement = elements[k];
                        }
                    </div>
                }

                @for (int i = k; i < elements.Count; i++)
                {
                    IArticleElement element = elements[i];

                    @if (!(i + 1 < elements.Count))
                    {
                        <Element @bind-OrderedElementsContainer="@ElementsContainer" ArticleElement="@element"/>
                    }
                    else
                    {
                        @if(elements[i + 1] is IArticleContent)
                        {
                            <Element @bind-OrderedElementsContainer="@ElementsContainer" ArticleElement="@element"/>
                        }
                        else
                        {
                            <div class="d-flex">
                                <div class="flex-grow-2 min-w-2-3 mr-1">
                                    <Element @bind-OrderedElementsContainer="@ElementsContainer" ArticleElement="@element"/>
                                </div>
                                <div class="flex-grow-1 min-w-1-3">
                                    @for (int j = i + 1; j < elements.Count; j++)
                                    {
                                        IArticleElement jElement = elements[j];

                                        @if (jElement is IArticleNote)
                                        {
                                            <Element @bind-OrderedElementsContainer="@ElementsContainer" ArticleElement="@jElement"/>
                                        }
                                        else
                                        {
                                            i = j - 1; break;
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                }
            }
        </CascadingValue>
    </article>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private OrderedElementsContainer? ElementsContainer;

    private Article? article;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnParametersSetAsync()
    {
        ArgumentNullException.ThrowIfNull(Id);

        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<Article>(nameof(article), out var restored))
        {
            article = await ApiService.GetArticle(Id);
        }
        else
        {
            article = restored;
        }

        ArgumentNullException.ThrowIfNull(article);
        ElementsContainer = new(article.OrderedElements());
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(article), article);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}