@using System.Text.Json
@using AnkiBooks.ApplicationCore.Entities
@inject IAnkiBooksApiService ApiService
@layout ArticlesLayout

<div>
    <EditForm   Model="Section"
                OnValidSubmit="SubmitForm"
                FormName="NewSection">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="section-title">Title:</label>
            <InputText @bind-Value="Section.Title" id="section-title" class="w-100" />
        </div>

        <button type="submit">Create</button>

    </EditForm>
</div>

@code {
    [CascadingParameter(Name="ArticleId")]
    public string? ArticleId { get; set; }

    [Parameter]
    public int OrdinalPosition { get; set; }

    [Parameter]
    public OrderedElementsContainer<Section> SectionsContainer { get; set; } = null!;

    [Parameter]
    public EventCallback<OrderedElementsContainer<Section>> SectionsContainerChanged { get; set; }

    [SupplyParameterFromForm]
    private Section Section { get; set; } = new("");

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(ArticleId);

        Section.ArticleId = ArticleId;
        Section.OrdinalPosition = OrdinalPosition;
    }

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(Section);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(Section.Title);
        ArgumentNullException.ThrowIfNull(Section.ArticleId);
        Section.OrdinalPosition = OrdinalPosition;

        Section? section = await ApiService.PostSection(Section);
        ArgumentNullException.ThrowIfNull(section);
        SectionsContainer.Add(section);
        await SectionsContainerChanged.InvokeAsync(SectionsContainer);
    }
}