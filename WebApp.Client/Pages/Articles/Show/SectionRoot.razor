@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Notes
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Contents
@using AnkiBooks.WebApp.Client.Pages.Articles.Show.Contents.Markdown

<CascadingValue Value="@Section.Id" Name="SectionId">
@if (NotesContainer != null && ContentsContainer != null)
{
    List<INote> notes = NotesContainer.OrderedElements;
    List<IContent> contents = ContentsContainer.OrderedElements;

    <section class="d-flex flex-row sm-flex-column">

        <div class="flex-grow-2 min-w-2-3 mr-2">
            @if (contents.Count == 0)
            {
                @if (ReadMode == false)
                {
                    <NewContent OrdinalPosition="@(0)" @bind-ContentsContainer="@ContentsContainer" />
                }
            }
            else
            {
                for (int i = 0; i < contents.Count; i ++)
                {
                    IContent content = contents[i];

                    switch (content)
                    {
                        case MarkdownContent mdContent:
                            <ShowMarkdown MarkdownContent="@mdContent"
                                            @bind-ContentsContainer="@ContentsContainer" />
                            break;
                    }
                    @if (ReadMode == false)
                    {
                        <NewContent OrdinalPosition="@(i + 1)" @bind-ContentsContainer="@ContentsContainer" />
                    }
                }
            }
        </div>

        <div class="flex-grow-1 min-w-1-3">
            @if (notes.Count == 0)
            {
                @if (ReadMode == false)
                {
                    <NewNote OrdinalPosition="@(0)" @bind-NotesContainer="@NotesContainer" />
                }
            }
            else
            {
                @for (int i = 0; i < notes.Count; i++)
                {
                    INote note = notes[i];

                    <NoteElement @bind-NotesContainer="NotesContainer" Note="@note" />
                    
                    @if (ReadMode == false)
                    {
                        <NewNote OrdinalPosition="@(i + 1)" @bind-NotesContainer="@NotesContainer"/>
                    }
                }
            }
        </div>
    </section>
}
</CascadingValue>

@code {
    [Parameter]
    public Section Section { get; set; } = null!;

    [Parameter]
    public OrderedElementsContainer<Section> SectionsContainer { get; set; } = null!;
    
    [Parameter]
    public EventCallback<OrderedElementsContainer<Section>> SectionsContainerChanged { get; set; }

    [CascadingParameter(Name="ReadMode")]
    public bool ReadMode { get; set; }
    
    public OrderedElementsContainer<INote>? NotesContainer { get; set; }
    public OrderedElementsContainer<IContent>? ContentsContainer { get; set; }

    protected override void OnParametersSet()
    {
        NotesContainer = new(Section.OrderedNotes());
        ContentsContainer = new(Section.OrderedContents());
    }
}