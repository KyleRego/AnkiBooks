@page "/articles/{id}"
@page "/articles"

@implements IDisposable

@layout MainLayout

@inject IArticleService ArticleService
@inject ILogger<ArticlesPage> Logger
@inject PersistentComponentState ApplicationState
@inject AuthenticationStateProvider AuthenticationStateProvider

@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Services
@using AnkiBooks.WebApp.Client.Shared.Heroicons
@using AnkiBooks.WebApp.Client.Pages.Articles.ArticlesTree

<PageTitle>Articles</PageTitle>

<div class="d-flex flex-row">
    <div    id="articles-sidebar" 
            class="d-none md:d-block
                    flex-shrink-0 position-sticky left-0 top-0 bottom-0
                    h-screen w-64 border-color-primary border-width-thin-r border-style-solid">
        <div class="pt-4 mx-4 d-flex justify-content-center">
            <div>
                [Articles Tree Switcher]
            </div>
        </div>

        <CascadingValue Value="@currentArticle" Name="CurrentArticle">
            <ArticlesTree />
        </CascadingValue>
    </div>

    @if (currentArticle != null)
    {
        <div class="w-100-percent md:w-100-percent-minus-w-64 mb-48">
            <ArticleRoot @bind-Article="@currentArticle" />
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    private Article? currentArticle;

    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null) return;
        // TODO: Retrieve random article using a spaced repetition algorithm

        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<Article>(nameof(currentArticle), out var restored))
        {
            currentArticle = await ArticleService.GetArticle(Id);
        }
        else
        {
            currentArticle = restored;
        }

        ArgumentNullException.ThrowIfNull(currentArticle);
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(currentArticle), currentArticle);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}