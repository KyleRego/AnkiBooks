@using System.Text.Json
@using System.Security.Claims

@using AnkiBooks.ApplicationCore
@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Interfaces
@using AnkiBooks.ApplicationCore.Services
@using AnkiBooks.WebApp.Client.Pages.Articles.Contents
@using AnkiBooks.WebApp.Client.Pages.Articles.Notes

@inject IUserArticleService UserArticleService
@inject ILogger<ArticleContent> Logger
@inject PersistentComponentState ApplicationState
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@Article.Title</PageTitle>

@if (ElementsContainer != null)
{
    List<ArticleElement> elements = ElementsContainer.OrderedElements;

    <CascadingValue Value="@Article.Id" Name="ArticleId">
        <article class="px-4">
            <div>
                @if (elements.Count == 0)
                {
                    @if (ReadMode == false)
                    {
                        <NewElement @bind-ElementsContainer="@ElementsContainer" OrdinalPosition="@(0)" />
                    }
                }
                else
                {
                    List<(List<IContent>, List<INote>)> groups = ArticleElementsGrouper.Groups(ElementsContainer.OrderedElements);

                    for (int j = 0; j < groups.Count; j++)
                    {
                        (List<IContent>, List<INote>) group = groups[j];
                        (List<IContent> contents, List<INote> notes) = group;

                        <div class="d-flex flex-column sm:flex-row @(j != 0 ? "border-top-primary pt-4" : "")">

                            <div class="sm:flex-grow-2 pr-4">
                                @foreach(IContent content in contents)
                                {
                                    <ContentElement Content="@content" @bind-ElementsContainer="@ElementsContainer" />

                                    @if (ReadMode == false)
                                    {
                                        <NewElement @bind-ElementsContainer="@ElementsContainer"
                                                    OrdinalPosition="@(content.OrdinalPosition + 1)" />
                                    }
                                }
                            </div>

                            @if (notes.Count != 0)
                            {
                                <div class="sm:flex-grow-1">
                                    @foreach(INote note in notes)
                                    {
                                        <NoteElement Note="@note" @bind-ElementsContainer="@ElementsContainer" />

                                        @if (ReadMode == false)
                                        {
                                            <NewElement @bind-ElementsContainer="@ElementsContainer"
                                                        OrdinalPosition="@(note.OrdinalPosition + 1)" />
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </article>
    </CascadingValue>
}


@code {
    [Parameter]
    public Article Article { get; set; } = null!;

    private OrderedElementsContainer<ArticleElement>? ElementsContainer;

    protected override void OnParametersSet()
    {
        ElementsContainer = new(Article.OrderedElements());
    }

    [CascadingParameter]
    public bool ReadMode { get; set; }
}