@using AnkiBooks.ApplicationCore.Entities
@using AnkiBooks.ApplicationCore.Services

@inject IUserArticleService UserArticleService

<EditForm Model="FormArticle" OnValidSubmit="SubmitForm">
    <div class="d-flex flex-row justify-content-start">
        <InputText @bind-Value="@FormArticle.Title" />
        <button type="submit" class="ml-2">
            Update title
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public bool EditingTitle { get; set; }

    [Parameter]
    public EventCallback<bool> EditingTitleChanged { get; set; }

    [Parameter]
    public Article Article { get; set; } = null!;

    [Parameter]
    public EventCallback<Article> ArticleChanged { get; set; }

    [SupplyParameterFromForm]
    public Article FormArticle { get; set; } = null!;

    protected override void OnInitialized()
    {
        FormArticle = Article;
    }

    private async Task SubmitForm()
    {
        ArgumentNullException.ThrowIfNull(Article.Title);

        Article? updatedArticle = await UserArticleService.PatchUserArticle(Article);
        ArgumentNullException.ThrowIfNull(updatedArticle);

        Article = updatedArticle;
        await ArticleChanged.InvokeAsync(Article);

        EditingTitle = false;
        await EditingTitleChanged.InvokeAsync(EditingTitle);
    }
}
