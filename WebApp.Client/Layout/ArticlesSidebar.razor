@inherits LayoutComponentBase
@layout MainLayout
@using System.Text.Json
@using System.Text.Json.Serialization
@using AnkiBooks.ApplicationCore.Entities
@inject IConfiguration Config
@inject HttpClient Http
@inject ILogger<Index> Logger
@implements IDisposable
@inject PersistentComponentState ApplicationState

<RadzenSplitter Orientation="Orientation.Horizontal" class="flex-grow-1">
    <RadzenSplitterPane Size="15rem">
        <div class="py-4 px-2">
            <RadzenTree>
                <RadzenTreeItem>
                    <Template>
                        <NavLink href="articles" Match="NavLinkMatch.All" class="text-break">Articles</NavLink>
                    </Template>
                    <ChildContent>
                        @if (articles == null)
                        {
                            <RadzenTreeItem Text="Loading articles..." />
                        }
                        else
                        {
                            @foreach(Article article in articles)
                            {
                                string hrefValue = $"articles/{article.Id}";

                                <RadzenTreeItem>
                                    <Template>
                                        <NavLink href="@hrefValue" class="text-break">@article.Title</NavLink>
                                    </Template>
                                </RadzenTreeItem>
                            }
                        }
                    </ChildContent>
                </RadzenTreeItem>
            </RadzenTree>
            @if (articles == null)
            {
                <p>Loading articles</p>
            }
            else
            {
                <ul>
                @foreach(Article article in articles)
                {
                    string hrefValue = $"articles/{article.Id}";

                    <li>
                        <NavLink href="@hrefValue" class="text-break">@article.Title</NavLink>
                    </li>
                }
                </ul>
            }
        </div>
    </RadzenSplitterPane>
    <RadzenSplitterPane>
        <div class="p-4">
            @Body
        </div>
    </RadzenSplitterPane>

</RadzenSplitter>

@code {
    string? serviceEndpoint;
    private Article[]? articles;
    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        serviceEndpoint = $"{Config.GetValue<string>("Url")}/api/Articles";

        if (!ApplicationState.TryTakeFromJson<Article[]>(nameof(articles), out var restored))
        {
            articles = await GetArticles();
        }
        else
        {
            articles = restored;
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(articles), articles);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

    private async Task<Article[]?> GetArticles()
    {
        JsonSerializerOptions options = new()
        {
            ReferenceHandler = ReferenceHandler.Preserve
        };

        return await Http.GetFromJsonAsync<Article[]>(serviceEndpoint);
    }
}